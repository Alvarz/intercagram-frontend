// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <FollowList
    followList={
      Array [
        Object {},
        Object {},
        Object {},
      ]
    }
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <ul
        className="list-group"
      >
        <li
          className="list-group-item"
        >
          <Connect(FollowItem)
            followItem={Object {}}
          />
        </li>
        <li
          className="list-group-item"
        >
          <Connect(FollowItem)
            followItem={Object {}}
          />
        </li>
        <li
          className="list-group-item"
        >
          <Connect(FollowItem)
            followItem={Object {}}
          />
        </li>
      </ul>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <li
            className="list-group-item"
          >
            <Connect(FollowItem)
              followItem={Object {}}
            />
          </li>,
          <li
            className="list-group-item"
          >
            <Connect(FollowItem)
              followItem={Object {}}
            />
          </li>,
          <li
            className="list-group-item"
          >
            <Connect(FollowItem)
              followItem={Object {}}
            />
          </li>,
        ],
        "className": "list-group",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "0",
          "nodeType": "host",
          "props": Object {
            "children": <Connect(FollowItem)
              followItem={Object {}}
            />,
            "className": "list-group-item",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "followItem": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "li",
        },
        Object {
          "instance": null,
          "key": "1",
          "nodeType": "host",
          "props": Object {
            "children": <Connect(FollowItem)
              followItem={Object {}}
            />,
            "className": "list-group-item",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "followItem": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "li",
        },
        Object {
          "instance": null,
          "key": "2",
          "nodeType": "host",
          "props": Object {
            "children": <Connect(FollowItem)
              followItem={Object {}}
            />,
            "className": "list-group-item",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "followItem": Object {},
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "li",
        },
      ],
      "type": "ul",
    },
    "type": "section",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <ul
          className="list-group"
        >
          <li
            className="list-group-item"
          >
            <Connect(FollowItem)
              followItem={Object {}}
            />
          </li>
          <li
            className="list-group-item"
          >
            <Connect(FollowItem)
              followItem={Object {}}
            />
          </li>
          <li
            className="list-group-item"
          >
            <Connect(FollowItem)
              followItem={Object {}}
            />
          </li>
        </ul>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <li
              className="list-group-item"
            >
              <Connect(FollowItem)
                followItem={Object {}}
              />
            </li>,
            <li
              className="list-group-item"
            >
              <Connect(FollowItem)
                followItem={Object {}}
              />
            </li>,
            <li
              className="list-group-item"
            >
              <Connect(FollowItem)
                followItem={Object {}}
              />
            </li>,
          ],
          "className": "list-group",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "0",
            "nodeType": "host",
            "props": Object {
              "children": <Connect(FollowItem)
                followItem={Object {}}
              />,
              "className": "list-group-item",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "followItem": Object {},
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "li",
          },
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "host",
            "props": Object {
              "children": <Connect(FollowItem)
                followItem={Object {}}
              />,
              "className": "list-group-item",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "followItem": Object {},
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "li",
          },
          Object {
            "instance": null,
            "key": "2",
            "nodeType": "host",
            "props": Object {
              "children": <Connect(FollowItem)
                followItem={Object {}}
              />,
              "className": "list-group-item",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "followItem": Object {},
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "li",
          },
        ],
        "type": "ul",
      },
      "type": "section",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "initialState": Object {
      "FollowReducer": Object {
        "isFollower": true,
      },
      "UserReducer": Object {
        "me": Object {
          "user": Object {},
        },
      },
    },
  },
}
`;
